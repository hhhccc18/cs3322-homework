package simpledb;

import java.util.*;
import java.util.stream.Stream;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {
	private static final long serialVersionUID = 1L;
	
	private final JoinPredicate p;
	private DbIterator child1, child2;
	private Tuple cur1;
	
	private final HashMap<Field, ArrayList<Tuple>> tbl2;
	private Iterator<Tuple> it2;
	
	/**
	 * Constructor. Accepts to children to join and the predicate to join them
	 * on
	 *
	 * @param p
	 *            The predicate to use to join the children
	 * @param child1
	 *            Iterator for the left(outer) relation to join
	 * @param child2
	 *            Iterator for the right(inner) relation to join
	 */
	public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
		if (p.getOperator() != Predicate.Op.EQUALS)
			throw new IllegalArgumentException("HashEquiJoin only supports EQUALS");
		
		this.p = p;
		this.child1 = child1;
		this.child2 = child2;
		this.tbl2 = new HashMap<>();
		
		this.cur1 = null;
		this.it2 = null;
	}
	
	public JoinPredicate getJoinPredicate() {
		return this.p;
	}
	
	public TupleDesc getTupleDesc() {
		return TupleDesc.merge(this.child1.getTupleDesc(), this.child2.getTupleDesc());
	}
	
	public String getJoinField1Name() {
		return this.child1.getTupleDesc().getFieldName(this.p.getField1());
	}
	
	public String getJoinField2Name() {
		return this.child2.getTupleDesc().getFieldName(this.p.getField2());
	}
	
	@Override
	public void open() throws DbException, NoSuchElementException,
			TransactionAbortedException {
		super.open();
		this.child1.open();
		this.child2.open();
		this.tbl2.clear();
		
		this.cur1 = null;
		this.it2 = null;
	}
	
	@Override
	public void close() {
		super.close();
		this.child1.close();
		this.child2.close();
		this.tbl2.clear();
	}
	
	public void rewind() throws DbException, TransactionAbortedException {
		this.close();
		this.open();
	}
	
	/**
	 * Returns the next tuple generated by the join, or null if there are no
	 * more tuples. Logically, this is the next tuple in r1 cross r2 that
	 * satisfies the join predicate. There are many possible implementations;
	 * the simplest is a nested loops join.
	 * <p>
	 * Note that the tuples returned from this particular implementation of Join
	 * are simply the concatenation of joining tuples from the left and right
	 * relation. Therefore, there will be two copies of the join attribute in
	 * the results. (Removing such duplicate columns can be done with an
	 * additional projection operator if needed.)
	 * <p>
	 * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
	 * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
	 *
	 * @return The next matching tuple.
	 * @see JoinPredicate#filter
	 */
	protected Tuple fetchNext() throws TransactionAbortedException, DbException {
		while (this.cur1 != null || this.child1.hasNext()) {
			if (this.cur1 == null) {
				this.cur1 = this.child1.next();
				
				if (this.it2 != null) {
					assert !this.it2.hasNext();
					this.it2 = this.tbl2.get(this.cur1.getField(this.p.getField1())).iterator();
				}
			}
			
			if (this.it2 == null) {
				while (this.child2.hasNext()) {
					Tuple cur2 = this.child2.next();
					
					if (!this.tbl2.containsKey(cur2.getField(this.p.getField2())))
						this.tbl2.put(cur2.getField(this.p.getField2()), new ArrayList<>());
					
					this.tbl2.get(cur2.getField(this.p.getField2())).add(cur2);
					
					if (this.p.filter(this.cur1, cur2))
						return Tuple.merge(this.cur1, cur2);
				}
				
				this.it2 = Collections.emptyIterator();
				this.cur1 = null;
			}
			
			else {
				while (this.it2.hasNext()) {
					Tuple cur2 = this.it2.next();
					
					assert this.p.filter(this.cur1, cur2);
					return Tuple.merge(this.cur1, cur2);
				}
				
				this.cur1 = null;
			}
			
			assert this.cur1 == null;
		}
		
		return null;
	}
	
	@Override
	public DbIterator[] getChildren() {
		return new DbIterator[] { child1, child2 };
	}
	
	@Override
	public void setChildren(DbIterator[] children) {
		if (children.length != 2)
			throw new IllegalArgumentException("HashEquiJoin requires 2 children");
		
		this.child1 = children[0];
		this.child2 = children[1];
		this.tbl2.clear();
	}
	
}
